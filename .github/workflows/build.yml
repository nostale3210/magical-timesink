name: build-rootfs
on:
  pull_request:
  schedule:
    - cron: '0 8 * * *'
  push:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build and push rootfs
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    strategy:
      fail-fast: false

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Create virtual btrfs filesystem
        shell: bash
        run: |
          truncate --size=10G builder.img
          truncate --size=10G tmp.img
          mkfs.btrfs builder.img
          mkfs.btrfs tmp.img
          mkdir builder
          mkdir tmp
          sudo mount -t btrfs -o defaults,noatime ./builder.img ./builder
          sudo mount -t btrfs -o defaults,noatime ./tmp.img ./tmp
          sudo chmod 777 builder
          sudo chmod 777 tmp
          cp -r arkdep-build.d builder/

      - name: Build rootfs in container
        uses: addnab/docker-run-action@v3
        with:
          image: archlinux:latest
          options: -v ${{ github.workspace }}:/work -v ${{ github.workspace }}/tmp:/var/tmp --privileged
          shell: bash
          run: |
            cd /work/builder

            sed -i "s/Required DatabaseOptional/Never/g" /etc/pacman.conf
            sed -i '72 i [arkane]' /etc/pacman.conf
            sed -i '73 i Server = https://repo.arkanelinux.org/$repo/os/$arch' /etc/pacman.conf
            sed -i '74 i [arkane-cauldron]' /etc/pacman.conf
            sed -i '75 i Server = https://repo.arkanelinux.org/$repo/os/$arch' /etc/pacman.conf

            pacman-key --init
            pacman -Sy --noconfirm archlinux-keyring
            pacman -Syu --noconfirm
            pacman -S --noconfirm base base-devel btrfs-progs arch-install-scripts device-mapper arkane-keyring arkdep

            arkdep-build timesink

            target_file=timesink-$(date +%d-%m-%H:%M)
            cp target/*.zst ./

            checksum=($(sha1sum ./*.tar.*))
            file=$(basename $(ls ./*.tar.*))
            compress=${file##*.}
            id=${file%%.*}
            echo "$id:$compress:${checksum[0]}" > database

            echo "$file" > file_name


      - name: Install github cli
        run: |
          sudo apt install gh -y

      - name: Upload rootfs
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          if gh release list -R ${{ github.repository_owner }}/${{ github.event.repository.name }} | grep "timesink-main"; then
            gh release view timesink-main -R ${{ github.repository_owner }}/${{ github.event.repository.name }} --json assets -q .assets[].name | xargs --no-run-if-empty -L 1 gh release delete-asset timesink-main -R ${{ github.repository_owner }}/${{ github.event.repository.name }}
            gh release upload timesink-main builder/$(cat builder/file_name) -R ${{ github.repository_owner }}/${{ github.event.repository.name }} --clobber
            gh release upload timesink-main builder/database -R ${{ github.repository_owner }}/${{ github.event.repository.name }} --clobber
          else
            gh release create timesink-main builder/$(cat builder/file_name) -t timesink-main -R ${{ github.repository_owner }}/${{ github.event.repository.name }}
            gh release create timesink-main builder/database -t timesink-main -R ${{ github.repository_owner }}/${{ github.event.repository.name }}
          fi


